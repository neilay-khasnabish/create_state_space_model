# Calling libraries
import numpy as np
from scipy.optimize import minimize
import matplotlib.pyplot as plt

# Initialise function
def createMdl(ite=100):
  # Create a placeholder
  totalsizeParams = A[0]*A[1] + B[0]*B[1] + C[0]*C[1]
  valDummy = 1000000000000.00

  # Random sampling
  print('Random sampling starts ...')
  for iRand in range(ite):
    # sigma * np.random.randn(...) + mu
    xDummy = np.random.randn(1, totalsizeParams) # sigma = 1 and mu = 1
    xAccpeted = xDummy[0,:]
    if objFcn(xDummy[0,:]) < valDummy:
      valDummy = objFcn(xDummy[0,:])
      xAccpeted = xDummy[0,:]
      print(valDummy)

  # Optimize
  print('Optimization starts ...')
  x0 = xAccpeted
  res = minimize(objFcn, x0, method='nelder-mead', options={'xatol': 1e-8, 'disp': True})

  # Final residual error
  print('Residual error is: ')
  print(objFcn(res.x))

  # Validation
  objFcn(res.x, flag = 1)

# Creating the objective function
def objFcn(x, flag = 0):
  # Extract parameters for A matrix
  A1 = x[0 : A[0]*A[1]]
  # Extract parameters for B matrix
  B1 = x[A[0]*A[1] : A[0]*A[1] + B[0]*B[1]]
  # Extract parameters for C matrix
  C1 = x[A[0]*A[1] + B[0]*B[1] : A[0]*A[1] + B[0]*B[1] + C[0]*C[1]]

  # Reshape the matrices
  A1 = np.reshape(A1, (A[0], A[1])) # No of states X No of states
  B1 = np.reshape(B1, (B[0], B[1])) # No of states X No of inputs
  C1 = np.reshape(C1, (C[0], C[1])) # No of outputs X No of states

  # Creating initial state as 0
  [r_s, c_s] = np.shape(A1)
  x=np.zeros((r_s,1))

  # For reshaping the input
  [r_s, c_s] = np.shape(B1)

  # Creating a copy of output
  y_p = y.copy()
  [r_op, c_op] = np.shape(y_p)

  # Expanding through time
  for i in range(r_op) :
    y_p[i] = np.transpose(np.matmul(C1,x))
    x = np.matmul(A1,x) + np.matmul(B1,u[i].reshape(c_s,1)) #x[k+1]

  if flag == 1:
    plt.plot(y[:,0])
    plt.plot(y_p[:,0])
    plt.ylabel('OP Value')
    plt.show()

  # Returning the error
  errVal = np.mean(np.abs(y - y_p))
  return(errVal)



# Format of input data >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# Define the shapes of system matrices as global variables
A = [30,30] # No of states X No of states
B = [30,25] # No of states X No of inputs
C = [22,30] # No of outputs X No of states

# Dummy input data as global variables
import time
start = time.time()
u = np.ones((100, 25)) # Samples X No of inputs
y = np.ones((100, 22)) # Samples X No of outputs

# Creating the model
createMdl(100)
end = time.time()

# Time count
print('Total time elapsed: ', end - start)
